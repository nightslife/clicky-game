{"version":3,"sources":["shuffle.js","App.js","picArray.js","serviceWorker.js","index.js"],"names":["shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffledArray","App","state","loadArray","picsPicked","rightWrong","score","topScore","onPick","id","console","log","temp","indexOf","push","setState","this","className","map","pic","key","src","alt","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iPAoBeA,G,MAnBD,SAAUC,GAIpB,IAHA,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAMI,OAGlB,IAAMD,GAGXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,ICZPQ,EAAgBT,ECJF,CACV,CAAC,EAAE,SACH,CAAC,EAAE,SACH,CAAC,EAAE,SACH,CAAC,EAAE,SACH,CAAC,EAAE,SACH,CAAC,EAAE,SACH,CAAC,EAAE,SACH,CAAC,EAAE,SACH,CAAC,EAAE,SACH,CAAC,GAAG,UACJ,CAAC,GAAG,UACJ,CAAC,GAAG,YDqEGU,E,2MArEbC,MAAQ,CACRC,UAAW,GACXC,WAAY,GACZC,WAAY,CAAC,0CAA2C,iEACxDC,MAAO,EACPC,SAAU,G,EAGVC,OAAS,SAACC,GACRC,QAAQC,IAAIF,GACZ,IAAIG,EAAO,EAAKV,MAAME,YACqB,IAAvC,EAAKF,MAAME,WAAWS,QAAQJ,IAChCC,QAAQC,IAAI,UAEZC,EAAKE,KAAKL,GACV,EAAKM,SAAS,CACZX,WAAYQ,EACZN,MAAO,EAAKJ,MAAMI,MAAQ,EAC1BD,WAAY,CAAC,gDACZ,WACEW,KAAKd,MAAMI,MAAQU,KAAKd,MAAMK,UAC/BS,KAAKD,SAAS,CAACR,SAAUS,KAAKd,MAAMI,QAEd,KAArBU,KAAKd,MAAMI,OACZU,KAAKD,SAAS,CACZV,WAAY,CAAC,YAAa,sCAC1BC,MAAO,IAEXI,QAAQC,IAAI,WAAYK,KAAKd,MAAME,WAAa,aAAeY,KAAKd,MAAMI,YAE5EI,QAAQC,IAAI,UACZC,EAAO,GACP,EAAKG,SAAS,CACZX,WAAYQ,EACZN,MAAO,EACPD,WAAY,CAAC,wCAAyC,iDACrD,WACCK,QAAQC,IAAI,WAAYK,KAAKd,MAAME,WAAa,aAAeY,KAAKd,MAAMI,UAC9EI,QAAQC,IAAI,UAAY,EAAKT,MAAMI,QAErC,IAAIN,EAAgBT,EAAQ,EAAKW,MAAMC,WACvC,EAAKY,SAAS,CAACZ,UAAWH,K,mFA5C1BgB,KAAKD,SAAS,CAACZ,UAAWH,M,+BA+ClB,IAAD,OACP,OACE,yBAAKiB,UAAU,OACb,gCACA,4BAAKD,KAAKd,MAAMG,WAAW,IACzB,4BAAKW,KAAKd,MAAMG,WAAW,IAC3B,sCAAYW,KAAKd,MAAMI,OACvB,0CAAgBU,KAAKd,MAAMK,WAE3B,yBAAKE,GAAG,QACLT,EAAckB,KAAI,SAAAC,GAAG,OACpB,yBACEC,IAAKD,EAAI,GACTE,IAAK,YAAcF,EAAI,GACvBG,IAAK,8BACLb,GAAIU,EAAI,GACRI,QAAS,kBAAM,EAAKf,OAAOW,EAAI,gB,GAlE7BK,aEKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c91f700c.chunk.js","sourcesContent":["//https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nvar shuffle = function (array) {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n  \n    return array;\n  }\n\nexport default shuffle;","import React, {Component} from 'react';\nimport './App.css';\nimport picsArray from './picArray'\nimport shuffle from './shuffle'\n\nlet shuffledArray = shuffle(picsArray);\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.setState({loadArray: shuffledArray})\n  }\n\n  state = {\n  loadArray: [],\n  picsPicked: [],\n  rightWrong: [\"Click your favorite dog to get started!\", \" Clicking the same dog twice causes the others to get jealous\"],\n  score: 0,\n  topScore: 0\n  }\n\n  onPick = (id) => {\n    console.log(id);\n    let temp = this.state.picsPicked;\n    if (this.state.picsPicked.indexOf(id) === -1) {\n      console.log(\"right!\");\n\n      temp.push(id);\n      this.setState({\n        picsPicked: temp,\n        score: this.state.score + 1,\n        rightWrong: [\"Keep Going! Which is your favorite so far?\"]\n      }, function(){\n        if(this.state.score > this.state.topScore){\n          this.setState({topScore: this.state.score})\n        }\n        if(this.state.score === 12){\n          this.setState({\n            rightWrong: [\"Congrats!\", \"You must really love all the dogs!\"],\n            score: 0})\n        }\n        console.log('Picked: '+ this.state.picsPicked + ' - Score: ' + this.state.score)})\n    } else {\n      console.log(\"wrong!\");\n      temp = [];\n      this.setState({\n        picsPicked: temp,\n        score: 0,\n        rightWrong: [\"Oh no! The other dogs got too jealous\", \"Don't worry, your top score has been saved!\"]\n      }, function(){\n          console.log('Picked: '+ this.state.picsPicked + ' - Score: ' + this.state.score)})\n      console.log('Score: ' + this.state.score);\n    }\n    let shuffledArray = shuffle(this.state.loadArray);\n    this.setState({loadArray: shuffledArray});\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n        <h2>{this.state.rightWrong[0]}</h2>\n          <h2>{this.state.rightWrong[1]}</h2>\n          <h2>Score: {this.state.score}</h2>\n          <h2>Top Score: {this.state.topScore}</h2>\n        </header>\n          <div id=\"game\">\n            {shuffledArray.map(pic =>\n              <img \n                key={pic[0]}\n                src={\"./images/\" + pic[1]} \n                alt={\"This is my favorite dog pic\"}\n                id={pic[0]}\n                onClick={() => this.onPick(pic[0])}>\n              </img>\n            )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","\nconst picsArray = [\n        [1,\"1.jpg\"],\n        [2,\"2.jpg\"],\n        [3,\"3.jpg\"],\n        [4,\"4.jpg\"],\n        [5,\"5.jpg\"],\n        [6,\"6.png\"],\n        [7,\"7.jpg\"],\n        [8,\"8.jpg\"],\n        [9,\"9.jpg\"],\n        [10,\"10.jpg\"],\n        [11,\"11.jpg\"],\n        [12,\"12.jpg\"],\n    ];\n\n    export default picsArray","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}